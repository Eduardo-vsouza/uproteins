import pandas as pd
from Bio import SeqIO

class Paralogues(object):
    def __init__(self, utp_all_df):
        """ utp_all_df must be a data frame generated by PercolatorUTP save_table() method using keep=all parameter."""
        self.df = pd.read_csv(utp_all_df, sep='\t')
        self.df = self.df[self.df["Unique Peptide"] == False]
        self.coords = self.df["Genome Coordinates"].tolist()
        self.orfs = self.df["proteinIds"].tolist()

        self.paralogues = {}
        self.uniqueParalogues = 0

    def check_stops(self):
        for i in range(len(self.coords)):
            orf_list = self.coords[i].split(",")
            starts = []
            stops = []

            for orf in orf_list:
                coords = orf.split("-")
                start = coords[0]
                stop = coords[1]
                if int(start) > int(stop):
                    startc = end
                    stopc = start
                else:
                    startc = start
                    stopc = stop
                starts.append(startc)
                stops.append(stopc)
            names = self.orfs[i].split(",")
            # print(starts)
            for j in range(len(stops)):
                for k in range(len(stops)):
                    if int(starts[j]) not in range(int(starts[k]), int(stops[k])) and int(starts[k]) not in range(int(starts[j]), int(stops[j])):
                        # print(starts[j], stops[j], starts[k], stops[k])
                        if names[j] not in self.paralogues and names[k] not in self.paralogues:
                            appear = 0
                            for par in self.paralogues:
                                if names[j] in self.paralogues[par].split(",") or names[k] in self.paralogues[par].split(","):
                                    appear += 1
                                    if appear > 1:
                                        break
                            if appear <= 1:
                                self.paralogues[names[j]] = names[k]

                        if names[j] in self.paralogues:
                            if names[k] not in self.paralogues[names[j]].split(","):
                                self.paralogues[names[j]] += f',{names[k]}'
        return self

    def create_fasta(self, fasta_db, output):
        print(self.paralogues)
        entries = []
        for orf in self.paralogues:
            if orf not in entries:
                entries.append(orf)
            for par in self.paralogues[orf].split(","):

                if par not in entries:
                    entries.append(par)
        records = SeqIO.parse(fasta_db, 'fasta')
        fasta = []
        for record in records:
            if record.id in entries:
                fasta.append(f'>{record.id}\n{record.seq}\n')
        with open(f'{output}.fasta', 'w') as fa:
            fa.writelines(fasta)
        return self


class ParalogousBySubset(object):
    def __init__(self, transcriptome_paralogues, genome_paralogues, subset_df):
        self.tPar = transcriptome_paralogues
        self.gPar = genome_paralogues
        self.df = pd.read_csv(subset_df, sep='\t')
        self.df = self.df.drop(self.df.columns[0], axis=1)
        self.paralogous = []
        self.__get_records()

    def __get_records(self):
        records = SeqIO.parse(self.tPar, 'fasta')
        for record in records:
            if str(record.seq) not in self.paralogous:
                self.paralogous.append(str(record.seq))
        records = SeqIO.parse(self.gPar, 'fasta')
        for record in records:
            if str(record.seq) not in self.paralogous:
                self.paralogous.append(str(record.seq))

    def filter_paralogous(self, output):
        df = self.df[self.df["ORF Sequence"].isin(self.paralogous)]
        df.to_csv(f'{output}putative_paralogous.xls', sep='\t', index=False)
